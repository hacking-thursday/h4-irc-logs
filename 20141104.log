--- Log opened 二 11月 04 00:00:27 2014
00:13 < matlinuxer2> yan++
00:14 < h4bot> [sync.in] page "h4" edited http://sync.in/h4
00:19 < yan> matlinuxer2: 不知道運作真的正不正常
00:38 < matlinuxer2> yan: 應該是 ok 的~
00:44 < h4-scripts> [h4-scripts] a0726h77 pushed 2 new commits to develop: http://git.io/Ua8QsA
00:44 < h4-scripts> h4-scripts/develop 39d8c93 yan: fix: syntax error
00:44 < h4-scripts> h4-scripts/develop 58c8ac7 yan: Merge branch 'etherpad_irc_notifier' into develop
00:48 < h4bot> [sync.in] page "h4" edited http://sync.in/h4
00:49 < yan> matlinuxer2: ok 了
00:50 < yan> 之後偵測的頻率是 20 min
09:54 < matlinuxer2> 早安~
09:55 < matlinuxer2> 唉  debian packaging 的東西都忘光光了
09:57  * matlinuxer2 覺得gentoo/arch 的比較直覺一點...
10:10 < kanru> matlinuxer2: 現在 dh 很簡單？
10:11 < kanru> 只是 debian 表面上看起來東西比較複雜 :P
10:11 < matlinuxer2> kanru: 怎麼說?
10:11 < matlinuxer2> kanru: XD
10:12 < kanru> 寫好 debian/changelog, debian/control 然後用 debian/rules 把東西裝到 debian/tmp -> done
10:12 < matlinuxer2> kanru: 那那個 <pkgname>.install 是用作...?
10:15 < matlinuxer2> kanru: BTW,  那個 debian 有人在用 docker 在 build pkg 嗎?
10:16 < matlinuxer2> 這兩天實用的感覺還蠻方便的，比以前開 qemu 來 build package 時，好用多了~
10:17 < kanru> 不知道耶, 一直想試試 docker
10:17 < kanru> 之前用 schroot 是可以搭配 btrfs subvolume
10:18 < matlinuxer2> 喔喔, 我是覺得 docker 比 chroot 更先進一點~
10:18 < kanru> <pkgname>.install 只是方便一點而已
10:19 < kanru> debian/rules -> imperative
10:19 < kanru> debian/*.install -> declarative
10:20 < matlinuxer2> docker 感覺像是 chroot + aufs layer management
10:20 < matlinuxer2> kanru: 嗯嗯
10:21 < matlinuxer2> kanru: 我之前處理標準的 c/c++ tarball，很多用預設的就可以了
10:21 < matlinuxer2> kanru: 現在要包 golang 的 package
10:21 < kanru> 通常會有 dh-xx 幫你 XD
10:21 < matlinuxer2> kanru: 因為 golang 是用它自己的 build system/convention. 所以有點不知道怎麼處理...
10:22 < kanru> 果然有 dh-golang
10:22 < matlinuxer2> kanru: 喔，我有看到
10:22 < kanru> matlinuxer2: 現在幾乎都是這樣做
10:22 < kanru> build-dep: dh-golang
10:22 < matlinuxer2> kanru: but, 我比較想要 sample package XD
10:22 < kanru> 然後 dh --with=golang
10:22 < kanru> 就好了
10:24 < matlinuxer2> https://www.irccloud.com/pastebin/VMrOwo4f
10:24 < matlinuxer2> 目前寫的 debian/rules 是這樣
10:24 < kanru> 看起來好像差不多是這樣 XD
10:24 < matlinuxer2> https://www.irccloud.com/pastebin/Axx7GToU
10:24  * kanru 不知道 sysd 是 golang
10:25 < matlinuxer2> build error log 大概是上面這樣~
10:25 < matlinuxer2> kanru: 科科, 因為是從 docker 臨摹來的, 就跟著用 golang 了
10:25 < kanru> 我猜是 dependency
10:26 < kanru> 可能不會自己去抓 depend 的 package?
10:26 < matlinuxer2> kanru: yes, 要用 golang 的 build tool 的方式去抓
10:26 < kanru> 那就..
10:27 < kanru> debian 理論上 dependcy 都要在 debian 裡面吧，不知道有沒有支援 build time 抓
10:27 < matlinuxer2> kanru: yes, debian 預設的前提假設是 deps 都是 deb pkg, and 用 debian 的方式安裝.
10:27 < kanru> yepp
10:27 < kanru> 所以就先裝好 dep 之後應該就可以了
10:28 < matlinuxer2> 不過我也沒辦法幫每個 dep 都包 debian package 說, 有 N>5 個耶... XD
10:28 < matlinuxer2> kanru: 我了解，我試試看，看能不能 override configure time 的 function 好了 ~
10:29 < kanru> 系統上先用 go build 裝好之後應該就可以在 build package 的時候找到了吧
10:29 < kanru> 系統上要有 dep 但是不一定要用 debian 方式裝？
10:29 < matlinuxer2> kanru: yup
10:30 < matlinuxer2> kanru: 不過我想說是不是把抓 deps 的步驟寫在 debian/rules 裡比較好
10:31 < kanru> 也..行...
10:31 < matlinuxer2> kanru: 不找之後丟 buildbot 時，buildbot 不會幫我們"手動"安裝deps的~~ XD
10:31 < matlinuxer2> s/不找/不然/g
10:31 < kanru> 可以寫在 build rule 裡面 :P
10:31 < matlinuxer2> build rule == debian/rules ? ( 確定一下..)
10:32 < kanru> 那就在 debian/rules 裡面 override_auto_configure: install-dep
10:32 < kanru> buildbot 不是還有自己的 build rule 嗎
10:32 < kanru> 我記得可以設定步驟
10:32 < kanru> 不過那就要改到 buildbot 比較麻煩 :P
10:32 < kanru> buildbot config
10:33 < kanru> 去開會, 有問題再討論 XD
10:33 < matlinuxer2> kanru: OK, 感謝指點!!~
